!<arch>
//                                              20        `
0-puts_recursion.c/
0-isupper.c/    0           0     0     644     38        `
int _putchar(char c)
{
return (0);
}

0-memset.c/     0           0     0     644     64        `
char *_memset(char *s, char b, unsigned int n)
{
return ('a')
}
/0              0           0     0     644     382       `
#include "main.h"

/**
 * _puts_recursion - This will convert ascii number into char
(* a blank line
 * Description: by placing %c instead of %d, the number will be converted)?
(* section header: Section description)*
 * @s: is a string
 * Return: just return 0 for ok
 */
void _puts_recursion(char *s)
{
if (*s)
{
_putchar(*s);
_puts_recursion(s + 1);
}
else
{
_putchar('\n');
}
}
0-strcat.c/     0           0     0     644     55        `
char *_strcat(char *dest, char *src)
{
return ('a');
}

100-atoi.c/     0           0     0     644     35        `
int _atoi(char *s)
{
return (0);
}

1-isdigit.c/    0           0     0     644     35        `
int _isdigit(int c)
{
return (0)
}

1-memcpy.c/     0           0     0     644     71        `
char *_memcpy(char *dest, char *src, unsigned int n)
{
return ('a');
}

1-strncat.c/    0           0     0     644     63        `
char *_strncat(char *dest, char *src, int n)
{
return ('a');
}

2-strchr.c/     0           0     0     644     49        `
char *_strchr(char *s, char c)
{
return ('a');
}

2-strlen.c/     0           0     0     644     37        `
int _strlen(char *s)
{
return (0);
}

2-strncpy.c/    0           0     0     644     63        `
char *_strncpy(char *dest, char *src, int n)
{
return ('a');
}

3-islower.c/    0           0     0     644     36        `
int _islower(int c)
{
return (0);
}
3-puts.c/       0           0     0     644     25        `
void _puts(char *s)
{

}

3-strcmp.c/     0           0     0     644     48        `
int _strcmp(char *s1, char *s2)
{
return (0);
}
3-strspn.c/     0           0     0     644     60        `
unsigned int _strspn(char *s, char *accept)
{
return (0);
}
4-isalpha.c/    0           0     0     644     36        `
int _isalpha(int c)
{
return (0);
}
4-strpbrk.c/    0           0     0     644     56        `
char *_strpbrk(char *s, char *accept)
{
return ('a');
}
5-strstr.c/     0           0     0     644     62        `
char *_strstr(char *haystack, char *needle)
{
return ('a');
}
6-abs.c/        0           0     0     644     32        `
int _abs(int n)
{
return (0);
}
9-strcpy.c/     0           0     0     644     55        `
char *_strcpy(char *dest, char *src)
{
return ('a');
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

